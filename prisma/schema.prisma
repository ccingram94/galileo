generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  dateOfBirth   DateTime?
  gradeLevel    String?
  parentEmail   String?
  phone         String?
  role          Role          @default(STUDENT)
  school        String?
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  examAttempts  ExamAttempt[]
  quizAttempts  QuizAttempt[]
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?
  apExamType  String
  isPublished Boolean      @default(false)
  isFree      Boolean      @default(false)
  price       Float?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
  units       Unit[]

  @@map("courses")
}

model Unit {
  id          String     @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lessons     Lesson[]
  unitExams   UnitExam[]
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("units")
}

model Lesson {
  id            String      @id @default(cuid())
  title         String
  description   String?
  content       String?
  videoUrl      String?
  order         Int
  unitId        String
  isPublished   Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  duration      Int?
  lessonQuizzes LessonQuiz?
  unit          Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model LessonQuiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  lessonId     String        @unique
  questions    Json
  passingScore Int           @default(70)
  isPublished  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lesson       Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attempts     QuizAttempt[]

  @@map("lesson_quizzes")
}

model UnitExam {
  id          String   @id @default(cuid())
  title       String
  description String?
  unitId      String
  
  // Add the missing order field
  order       Int      @default(1)
  
  // Exam Structure and Content
  examType    ExamType @default(UNIT_ASSESSMENT)
  instructions String?
  questions   Json
  
  // Timing Configuration
  timeLimit                Int?
  allowTimeExtensions      Boolean @default(false)
  
  // Exam Structure Configuration
  structure               Json?    // Stores MC/FR part configuration
  
  // Scoring Configuration
  passingScore            Int      @default(70)
  totalPoints             Int?
  multipleChoiceWeight    Float    @default(0.6)
  freeResponseWeight      Float    @default(0.4)
  apStyleScoring          Boolean  @default(false)
  allowPartialCredit      Boolean  @default(true)
  
  // Exam Behavior Settings
  maxAttempts             Int      @default(1)
  shuffleQuestions        Boolean  @default(false)
  shuffleOptions          Boolean  @default(true)
  showCorrectAnswers      Boolean  @default(false)
  allowReviewAfterSubmission Boolean @default(true)
  
  // Availability Settings
  availableFrom           DateTime?
  availableUntil          DateTime?
  requiresProctoring      Boolean  @default(false)
  
  // Publishing
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  unit        Unit          @relation(fields: [unitId], references: [id], onDelete: Cascade)
  attempts    ExamAttempt[]

  @@map("unit_exams")
}

model Enrollment {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  enrolledAt    DateTime      @default(now())
  completedAt   DateTime?
  progress      Json?
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  course        Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model QuizAttempt {
  id           String     @id @default(cuid())
  userId       String
  lessonQuizId String
  answers      Json
  score        Float
  passed       Boolean
  timeSpent    Int?
  completedAt  DateTime   @default(now())
  lessonQuiz   LessonQuiz @relation(fields: [lessonQuizId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model ExamAttempt {
  id          String    @id @default(cuid())
  userId      String
  unitExamId  String
  answers     Json
  score       Float
  passed      Boolean
  timeSpent   Int?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  unitExam    UnitExam  @relation(fields: [unitExamId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exam_attempts")
}

enum Role {
  STUDENT
  ADMIN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ExamType {
  UNIT_ASSESSMENT
  MIDTERM
  FINAL
  PRACTICE
  AP_MOCK
}
