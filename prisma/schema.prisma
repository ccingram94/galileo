generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  dateOfBirth   DateTime?
  gradeLevel    String?
  parentEmail   String?
  phone         String?
  role          Role          @default(STUDENT)
  school        String?
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  examAttempts  ExamAttempt[]
  quizAttempts  QuizAttempt[]
  
  // Add grading relations
  gradedAttempts    ExamAttempt[]  @relation("GradedAttempts")
  gradedResponses   ExamResponse[] @relation("GradedResponses")
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?
  apExamType  String?
  isPublished Boolean      @default(false)
  isFree      Boolean      @default(false)
  price       Float?
  imageUrl    String?
  
  // Delivery method availability
  selfPacedAvailable Boolean @default(true)
  tutorAvailable     Boolean @default(true)
  groupAvailable     Boolean @default(true)
  
  // Pricing for different delivery methods
  selfPacedPrice     Float?
  tutorHourlyRate    Float?
  groupHourlyRate    Float?
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
  units       Unit[]

  @@map("courses")
}

model Unit {
  id          String     @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lessons     Lesson[]
  unitExams   UnitExam[]
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("units")
}

model Lesson {
  id            String           @id @default(cuid())
  title         String
  description   String?
  order         Int
  unitId        String
  isPublished   Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Core lesson metadata
  estimatedDuration Int?           // in minutes
  difficultyLevel   String?        // beginner, intermediate, advanced
  prerequisites     String[]       @default([])
  keywords          String[]       @default([])
  
  // Essential pedagogical components
  essentialQuestions String[]       @default([]) // Key questions that drive learning
  learningObjectives String[]       @default([]) // What students will achieve
  
  // Delivery method settings
  selfPacedEnabled  Boolean        @default(true)
  tutorEnabled      Boolean        @default(true)
  groupEnabled      Boolean        @default(true)
  
  // Instructor guidance
  instructorNotes   String?        // Teaching tips, common misconceptions, etc.
  suggestedPacing   Json?          // Time allocation for different activities
  
  // Relations
  unit              Unit           @relation(fields: [unitId], references: [id], onDelete: Cascade)
  vocabulary        LessonVocabulary[]
  contentBlocks     ContentBlock[]
  examples          LessonExample[]
  lessonQuiz        LessonQuiz?
  resources         LessonResource[]

  @@map("lessons")
}

// Key vocabulary terms for the lesson
model LessonVocabulary {
  id          String   @id @default(cuid())
  lessonId    String
  term        String
  definition  String
  example     String?  // Example usage or context
  order       Int
  
  // Additional learning aids
  pronunciation String? // For complex terms
  etymology     String? // Word origin (helpful for STEM terms)
  relatedTerms  String[] @default([]) // Connected vocabulary
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("lesson_vocabulary")
}

// Modular content blocks for the main lesson content
model ContentBlock {
  id          String      @id @default(cuid())
  lessonId    String
  title       String
  type        ContentType
  order       Int
  
  // Content data
  content     String?     // Text content, HTML, markdown
  videoUrl    String?     // Video content URL
  metadata    Json?       // Type-specific data (timestamps, interactive elements)
  
  // Pedagogical settings
  isRequired  Boolean     @default(true)
  
  // Delivery method visibility
  showInSelfPaced Boolean  @default(true)
  showInTutor     Boolean  @default(true)
  showInGroup     Boolean  @default(true)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("content_blocks")
}

// Example exercises within the lesson
model LessonExample {
  id              String       @id @default(cuid())
  lessonId        String
  title           String
  description     String?
  order           Int
  
  // Exercise content
  problemStatement String       // The problem/question
  solution        String        // Step-by-step solution
  explanation     String?       // Additional explanation of concepts used
  
  // Exercise metadata
  difficulty      String?       // easy, medium, hard
  estimatedTime   Int?          // minutes to solve
  concepts        String[]      @default([]) // Concepts this example reinforces
  
  // Media attachments
  imageUrl        String?       // Diagrams, graphs, etc.
  videoUrl        String?       // Solution walkthrough video
  
  // Delivery method customization
  selfPacedNotes  String?       // For self-paced learners
  tutorNotes      String?       // For tutor sessions
  groupNotes      String?       // For group classes
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  lesson          Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("lesson_examples")
}

// Enhanced lesson quiz model
model LessonQuiz {
  id           String        @id @default(cuid())
  title        String        @default("Lesson Quiz")
  description  String?
  lessonId     String        @unique
  
  // Quiz configuration
  passingScore Int           @default(70)
  timeLimit    Int?          // minutes (optional)
  maxAttempts  Int           @default(3)
  
  // Question management
  randomizeQuestions Boolean  @default(false)
  showFeedback      Boolean  @default(true)
  showCorrectAnswers Boolean @default(true)
  
  isPublished  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  lesson       Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions    QuizQuestion[]
  attempts     QuizAttempt[]

  @@map("lesson_quizzes")
}

// Individual quiz questions
model QuizQuestion {
  id           String       @id @default(cuid())
  quizId       String
  question     String
  type         QuizQuestionType
  order        Int
  points       Float        @default(1)
  
  // Question content
  options      Json?        // For multiple choice/true-false
  correctAnswer Json        // Correct answer(s)
  explanation  String?      // Explanation of the correct answer
  
  // Question metadata
  difficulty   String?      // easy, medium, hard
  concepts     String[]     @default([]) // Concepts being tested
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  quiz         LessonQuiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

// Supporting resources and materials
model LessonResource {
  id          String       @id @default(cuid())
  lessonId    String
  title       String
  description String?
  type        ResourceType
  url         String?      // For external resources
  fileUrl     String?      // For uploaded files
  content     String?      // For text resources
  order       Int
  isRequired  Boolean      @default(false)
  
  // Delivery method visibility
  availableInSelfPaced Boolean @default(true)
  availableInTutor     Boolean @default(true)
  availableInGroup     Boolean @default(true)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  lesson      Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("lesson_resources")
}

model UnitExam {
  id          String   @id @default(cuid())
  title       String
  description String?
  unitId      String
  order       Int      @default(1)
  
  // Exam Structure and Content
  examType    ExamType @default(UNIT_ASSESSMENT)
  instructions String?
  
  // Timing Configuration
  timeLimit                Int?
  allowTimeExtensions      Boolean @default(false)
  
  // Exam Structure Configuration
  structure               Json?    // Stores MC/FR part configuration
  
  // Scoring Configuration
  passingScore            Int      @default(70)
  totalPoints             Int?
  multipleChoiceWeight    Float    @default(0.6)
  freeResponseWeight      Float    @default(0.4)
  apStyleScoring          Boolean  @default(false)
  allowPartialCredit      Boolean  @default(true)
  
  // Exam Behavior Settings
  maxAttempts             Int      @default(1)
  shuffleQuestions        Boolean  @default(false)
  shuffleOptions          Boolean  @default(true)
  showCorrectAnswers      Boolean  @default(false)
  allowReviewAfterSubmission Boolean @default(true)
  
  // Availability Settings
  availableFrom           DateTime?
  availableUntil          DateTime?
  requiresProctoring      Boolean  @default(false)
  
  // Publishing
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  unit        Unit          @relation(fields: [unitId], references: [id], onDelete: Cascade)
  attempts    ExamAttempt[]
  questions   ExamQuestion[]

  @@map("unit_exams")
}

// Separate model for exam questions to support detailed grading
model ExamQuestion {
  id          String      @id @default(cuid())
  examId      String
  type        QuestionType
  title       String?
  question    String
  options     Json?       // For multiple choice options
  correctAnswer Json?     // Correct answer(s)
  explanation String?
  points      Float       @default(1)
  order       Int
  rubric      Json?       // Grading rubric for FR questions
  tags        String[]    @default([])
  difficulty  String?     // easy, medium, hard
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  exam        UnitExam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  responses   ExamResponse[]

  @@map("exam_questions")
}

model ExamAttempt {
  id          String   @id @default(cuid())
  userId      String
  unitExamId  String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  timeUsed    Int?     // in minutes
  score       Float?
  passed      Boolean  @default(false)
  
  // Add grading fields
  gradingStatus     String   @default("pending")     // pending, in_progress, completed
  gradedAt          DateTime?
  gradedBy          String?
  instructorFeedback String?
  needsReview       Boolean  @default(false)
  autoGradedScore   Float?   // MC score
  manualGradedScore Float?   // FR score
  
  unitExam    UnitExam  @relation(fields: [unitExamId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  grader      User?     @relation("GradedAttempts", fields: [gradedBy], references: [id])
  responses   ExamResponse[]

  @@map("exam_attempts")
}

// Individual responses to exam questions for detailed grading
model ExamResponse {
  id           String   @id @default(cuid())
  attemptId    String
  questionId   String
  answer       Json?
  isCorrect    Boolean?
  pointsEarned Float?
  createdAt    DateTime @default(now())
  
  // Add grading fields for FR questions
  gradingStatus      String   @default("pending")    // pending, graded
  instructorScore    Float?
  instructorFeedback String?
  rubricUsed         Json?
  gradedAt           DateTime?
  gradedBy           String?
  
  attempt      ExamAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question     ExamQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  grader       User?        @relation("GradedResponses", fields: [gradedBy], references: [id])

  @@map("exam_responses")
}

model Enrollment {
  id              String         @id @default(cuid())
  userId          String
  courseId        String
  enrolledAt      DateTime       @default(now())
  completedAt     DateTime?
  progress        Json?
  paymentStatus   PaymentStatus  @default(PENDING)
  paymentId       String?
  
  // Delivery method
  deliveryMethod  DeliveryMethod @default(SELF_PACED)
  
  course          Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

// Enhanced quiz attempts with detailed tracking
model QuizAttempt {
  id           String     @id @default(cuid())
  userId       String
  lessonQuizId String
  attemptNumber Int       @default(1)
  
  // Attempt data
  answers      Json       // Student's answers
  score        Float
  maxScore     Float
  passed       Boolean
  timeSpent    Int?       // seconds
  
  // Detailed tracking
  startedAt    DateTime   @default(now())
  completedAt  DateTime?
  
  // Analytics
  questionsCorrect Int    @default(0)
  questionsTotal   Int    @default(0)
  
  lessonQuiz   LessonQuiz @relation(fields: [lessonQuizId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ExamType {
  UNIT_ASSESSMENT
  MIDTERM
  FINAL
  PRACTICE
  AP_MOCK
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FREE_RESPONSE
  ESSAY
  SHORT_ANSWER
}

enum QuizQuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  SHORT_ANSWER
  MATCHING
  ORDERING
}

enum ContentType {
  INTRO_VIDEO           // Opening video for the lesson
  CONCEPT_EXPLANATION   // Text-based concept explanation
  INTERACTIVE_DEMO      // Interactive demonstration
  WORKED_EXAMPLE       // Step-by-step example
  FORMULA_DERIVATION   // Mathematical derivations
  REAL_WORLD_APPLICATION // Practical applications
  SUMMARY              // Lesson wrap-up
}

enum ResourceType {
  FORMULA_SHEET
  REFERENCE_GUIDE
  PRACTICE_WORKSHEET
  EXTERNAL_ARTICLE
  VIDEO_SUPPLEMENT
  INTERACTIVE_SIMULATION
  GRAPHING_TOOL
  CALCULATOR_GUIDE
  STUDY_GUIDE
}

enum DeliveryMethod {
  SELF_PACED
  PRIVATE_TUTOR
  GROUP_CLASS
}
